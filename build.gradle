wrapper {
    gradleVersion = '7.4.2'
}

apply plugin: 'groovy'
apply plugin: 'maven-publish'
apply plugin: 'com.gradle.plugin-publish'
apply plugin: 'eclipse'

group = pGroup
version = pVersion
description = pDescription

sourceCompatibility = 1.8
targetCompatibility = 1.8

if (project.hasProperty("topobyte")) {
    apply from: 'file:///' + System.getProperty("user.home") \
        + '/.gradle/topobyte.gradle'
}

buildscript {
    dependencies {
        classpath 'junit:junit:4.12'
        classpath 'com.gradle.publish:plugin-publish-plugin:0.9.9'
    }
    repositories {
        mavenCentral()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation gradleApi()
    implementation localGroovy()
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

pluginBundle {
  website = 'http://www.topobyte.de'
  vcsUrl = 'https://github.com/sebkur/gradle-launch-and-install-plugin'
  description = 'Topobyte launch and install plugin'

  plugins {
    launchAndInstallPlugin {
      id = 'de.topobyte.launch-and-install-gradle-plugin'
      displayName = 'Topobyte launch and install plugin'
    }
  }
}

artifacts {
    archives sourcesJar
}

def pomInfo = new XmlSlurper().parse(file('info.pom'));

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            pom {
                name = "$pomInfo.name"
                description = "$pomInfo.description"
                url = "$pomInfo.url"
                licenses {
                    license {
                        name = "$pomInfo.licenseName"
                        url = "$pomInfo.licenseUrl"
                        distribution = "$pomInfo.licenseDistribution"
                    }
                }
            }
        }
    }
}

if (project.hasProperty("publishForTesting")) {
    publishing {
        repositories {
            maven{
                url = 'maven-repo'
            }
        }
    }
    tasks.withType(GenerateModuleMetadata) {
        enabled = false
    }
}
